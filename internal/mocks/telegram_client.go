// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/base-org/pessimism/internal/client (interfaces: TelegramClient)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	client "github.com/base-org/pessimism/internal/client"
	gomock "github.com/golang/mock/gomock"
)

// MockTelegramClient is a mock of TelegramClient interface.
type MockTelegramClient struct {
	ctrl     *gomock.Controller
	recorder *MockTelegramClientMockRecorder
}

// MockTelegramClientMockRecorder is the mock recorder for MockTelegramClient.
type MockTelegramClientMockRecorder struct {
	mock *MockTelegramClient
}

// NewMockTelegramClient creates a new mock instance.
func NewMockTelegramClient(ctrl *gomock.Controller) *MockTelegramClient {
	mock := &MockTelegramClient{ctrl: ctrl}
	mock.recorder = &MockTelegramClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTelegramClient) EXPECT() *MockTelegramClientMockRecorder {
	return m.recorder
}

// GetName mocks base method.
func (m *MockTelegramClient) GetName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetName")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetName indicates an expected call of GetName.
func (mr *MockTelegramClientMockRecorder) GetName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetName", reflect.TypeOf((*MockTelegramClient)(nil).GetName))
}

// PostEvent mocks base method.
func (m *MockTelegramClient) PostEvent(arg0 context.Context, arg1 *client.AlertEventTrigger) (*client.AlertAPIResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PostEvent", arg0, arg1)
	ret0, _ := ret[0].(*client.AlertAPIResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PostEvent indicates an expected call of PostEvent.
func (mr *MockTelegramClientMockRecorder) PostEvent(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostEvent", reflect.TypeOf((*MockTelegramClient)(nil).PostEvent), arg0, arg1)
}
