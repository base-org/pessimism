// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/base-org/pessimism/internal/client (interfaces: PagerdutyClient)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	client "github.com/base-org/pessimism/internal/client"
	gomock "github.com/golang/mock/gomock"
)

// MockPagerdutyClient is a mock of PagerdutyClient interface.
type MockPagerdutyClient struct {
	ctrl     *gomock.Controller
	recorder *MockPagerdutyClientMockRecorder
}

// MockPagerdutyClientMockRecorder is the mock recorder for MockPagerdutyClient.
type MockPagerdutyClientMockRecorder struct {
	mock *MockPagerdutyClient
}

// NewMockPagerdutyClient creates a new mock instance.
func NewMockPagerdutyClient(ctrl *gomock.Controller) *MockPagerdutyClient {
	mock := &MockPagerdutyClient{ctrl: ctrl}
	mock.recorder = &MockPagerdutyClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPagerdutyClient) EXPECT() *MockPagerdutyClientMockRecorder {
	return m.recorder
}

// PostEvent mocks base method.
func (m *MockPagerdutyClient) PostEvent(arg0 context.Context, arg1 *client.PagerdutyEventTrigger) (*client.PagerdutyAPIResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PostEvent", arg0, arg1)
	ret0, _ := ret[0].(*client.PagerdutyAPIResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PostEvent indicates an expected call of PostEvent.
func (mr *MockPagerdutyClientMockRecorder) PostEvent(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostEvent", reflect.TypeOf((*MockPagerdutyClient)(nil).PostEvent), arg0, arg1)
}
