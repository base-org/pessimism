// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/base-org/pessimism/internal/client (interfaces: SlackClient)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	client "github.com/base-org/pessimism/internal/client"
	gomock "github.com/golang/mock/gomock"
)

// MockSlackClient is a mock of SlackClient interface.
type MockSlackClient struct {
	ctrl     *gomock.Controller
	recorder *MockSlackClientMockRecorder
}

// MockSlackClientMockRecorder is the mock recorder for MockSlackClient.
type MockSlackClientMockRecorder struct {
	mock *MockSlackClient
}

// NewMockSlackClient creates a new mock instance.
func NewMockSlackClient(ctrl *gomock.Controller) *MockSlackClient {
	mock := &MockSlackClient{ctrl: ctrl}
	mock.recorder = &MockSlackClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSlackClient) EXPECT() *MockSlackClientMockRecorder {
	return m.recorder
}

// PostData mocks base method.
func (m *MockSlackClient) PostData(arg0 string) (*client.SlackAPIResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PostData", arg0)
	ret0, _ := ret[0].(*client.SlackAPIResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PostData indicates an expected call of PostData.
func (mr *MockSlackClientMockRecorder) PostData(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostData", reflect.TypeOf((*MockSlackClient)(nil).PostData), arg0)
}
