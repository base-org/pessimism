// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/base-org/pessimism/internal/alert (interfaces: AlertingManager)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	core "github.com/base-org/pessimism/internal/core"
	gomock "github.com/golang/mock/gomock"
)

// MockAlertingManager is a mock of AlertingManager interface.
type MockAlertingManager struct {
	ctrl     *gomock.Controller
	recorder *MockAlertingManagerMockRecorder
}

// MockAlertingManagerMockRecorder is the mock recorder for MockAlertingManager.
type MockAlertingManagerMockRecorder struct {
	mock *MockAlertingManager
}

// NewMockAlertingManager creates a new mock instance.
func NewMockAlertingManager(ctrl *gomock.Controller) *MockAlertingManager {
	mock := &MockAlertingManager{ctrl: ctrl}
	mock.recorder = &MockAlertingManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAlertingManager) EXPECT() *MockAlertingManagerMockRecorder {
	return m.recorder
}

// AddInvariantSession mocks base method.
func (m *MockAlertingManager) AddInvariantSession(arg0 core.InvSessionUUID, arg1 core.AlertDestination) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddInvariantSession", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddInvariantSession indicates an expected call of AddInvariantSession.
func (mr *MockAlertingManagerMockRecorder) AddInvariantSession(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddInvariantSession", reflect.TypeOf((*MockAlertingManager)(nil).AddInvariantSession), arg0, arg1)
}

// EventLoop mocks base method.
func (m *MockAlertingManager) EventLoop(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EventLoop", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// EventLoop indicates an expected call of EventLoop.
func (mr *MockAlertingManagerMockRecorder) EventLoop(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EventLoop", reflect.TypeOf((*MockAlertingManager)(nil).EventLoop), arg0)
}

// Transit mocks base method.
func (m *MockAlertingManager) Transit() chan core.Alert {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Transit")
	ret0, _ := ret[0].(chan core.Alert)
	return ret0
}

// Transit indicates an expected call of Transit.
func (mr *MockAlertingManagerMockRecorder) Transit() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Transit", reflect.TypeOf((*MockAlertingManager)(nil).Transit))
}
