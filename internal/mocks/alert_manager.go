// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/base-org/pessimism/internal/alert (interfaces: Manager)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	core "github.com/base-org/pessimism/internal/core"
	gomock "github.com/golang/mock/gomock"
)

// AlertManager is a mock of Manager interface.
type AlertManager struct {
	ctrl     *gomock.Controller
	recorder *AlertManagerMockRecorder
}

// AlertManagerMockRecorder is the mock recorder for AlertManager.
type AlertManagerMockRecorder struct {
	mock *AlertManager
}

// NewAlertManager creates a new mock instance.
func NewAlertManager(ctrl *gomock.Controller) *AlertManager {
	mock := &AlertManager{ctrl: ctrl}
	mock.recorder = &AlertManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *AlertManager) EXPECT() *AlertManagerMockRecorder {
	return m.recorder
}

// AddSession mocks base method.
func (m *AlertManager) AddSession(arg0 core.SUUID, arg1 *core.AlertPolicy) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddSession", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddSession indicates an expected call of AddSession.
func (mr *AlertManagerMockRecorder) AddSession(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddSession", reflect.TypeOf((*AlertManager)(nil).AddSession), arg0, arg1)
}

// EventLoop mocks base method.
func (m *AlertManager) EventLoop() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EventLoop")
	ret0, _ := ret[0].(error)
	return ret0
}

// EventLoop indicates an expected call of EventLoop.
func (mr *AlertManagerMockRecorder) EventLoop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EventLoop", reflect.TypeOf((*AlertManager)(nil).EventLoop))
}

// Shutdown mocks base method.
func (m *AlertManager) Shutdown() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Shutdown")
	ret0, _ := ret[0].(error)
	return ret0
}

// Shutdown indicates an expected call of Shutdown.
func (mr *AlertManagerMockRecorder) Shutdown() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Shutdown", reflect.TypeOf((*AlertManager)(nil).Shutdown))
}

// Transit mocks base method.
func (m *AlertManager) Transit() chan core.Alert {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Transit")
	ret0, _ := ret[0].(chan core.Alert)
	return ret0
}

// Transit indicates an expected call of Transit.
func (mr *AlertManagerMockRecorder) Transit() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Transit", reflect.TypeOf((*AlertManager)(nil).Transit))
}
